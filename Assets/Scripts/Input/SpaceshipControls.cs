//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/SpaceshipControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpaceshipControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpaceshipControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpaceshipControls"",
    ""maps"": [
        {
            ""name"": ""Spaceship2D"",
            ""id"": ""550ee01b-4404-4b3b-9959-8c4497076fa4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""182b209b-8e57-4da3-9332-148d6b8e5446"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""82103c6a-cc67-4d43-aae0-056bc6c471e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""aa8d4525-1c9c-4fef-9264-cee739af51bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bcb1ae4c-819d-4b04-85f8-5fdac35c4ad1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0a9920bb-c352-4c79-9fa5-7a140a92b350"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f66ccfdd-2b93-403b-95ec-917dc0278a1c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""117a6a52-d509-43e4-90f2-376d66f814e4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4da44a04-3cd6-4fd0-bae8-38215819a7fe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d26615a-6e27-4c85-9b64-48b95fbc756c"",
                    ""path"": ""<AndroidJoystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5fecdbf-26f5-4b49-852b-78c6c2181e01"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7237a80e-eecf-4814-99d2-e8ac16e7249c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Spaceship2D
        m_Spaceship2D = asset.FindActionMap("Spaceship2D", throwIfNotFound: true);
        m_Spaceship2D_Move = m_Spaceship2D.FindAction("Move", throwIfNotFound: true);
        m_Spaceship2D_Shoot = m_Spaceship2D.FindAction("Shoot", throwIfNotFound: true);
        m_Spaceship2D_Pause = m_Spaceship2D.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Spaceship2D
    private readonly InputActionMap m_Spaceship2D;
    private ISpaceship2DActions m_Spaceship2DActionsCallbackInterface;
    private readonly InputAction m_Spaceship2D_Move;
    private readonly InputAction m_Spaceship2D_Shoot;
    private readonly InputAction m_Spaceship2D_Pause;
    public struct Spaceship2DActions
    {
        private @SpaceshipControls m_Wrapper;
        public Spaceship2DActions(@SpaceshipControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Spaceship2D_Move;
        public InputAction @Shoot => m_Wrapper.m_Spaceship2D_Shoot;
        public InputAction @Pause => m_Wrapper.m_Spaceship2D_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Spaceship2D; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Spaceship2DActions set) { return set.Get(); }
        public void SetCallbacks(ISpaceship2DActions instance)
        {
            if (m_Wrapper.m_Spaceship2DActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Spaceship2DActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Spaceship2DActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Spaceship2DActionsCallbackInterface.OnMove;
                @Shoot.started -= m_Wrapper.m_Spaceship2DActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_Spaceship2DActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_Spaceship2DActionsCallbackInterface.OnShoot;
                @Pause.started -= m_Wrapper.m_Spaceship2DActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_Spaceship2DActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_Spaceship2DActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_Spaceship2DActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public Spaceship2DActions @Spaceship2D => new Spaceship2DActions(this);
    public interface ISpaceship2DActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
